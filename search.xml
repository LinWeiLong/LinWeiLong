<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>微信返回Vue SPA不刷新页面的问题记录</title>
      <link href="/2019/07/07/wechat-backword-refresh/"/>
      <url>/2019/07/07/wechat-backword-refresh/</url>
      
        <content type="html"><![CDATA[<h1 id="问题表现"><a href="#问题表现" class="headerlink" title="问题表现"></a>问题表现</h1><p>在微信内，打开SAP的页面SPA-a，从SPA-a打开外部页面B，从B再返回SPA-a的话，SPA-a页面会呈现Vue数据绑定特征失效的症状，比如load完接口，loading窗口不会根据v-show变化而消失，点击路由跳转SPA，页面也没有出现变化，但实际上路由的hash已经变化了，但是页面内容没有跟着变化。</p><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><blockquote><p><strong>浏览器前进/后退缓存</strong></p><p>这里提到一个概念，浏览器前进/后退缓存(Backward/Forward Cache, BF Cache)，当然也有人叫 disk Cache。<br>BF Cache 是一种浏览器优化， HTML 标准并未指定其如何进行缓存，因此缓存行为是各浏览器各自实现，所以不尽相同。<br>由于不是 HTTP 缓存，所以通过头文件缓存设置 no-cache 是无效的。当然也不能以 HTTP 缓存机制来理解 BF Cache。</p><p>作者：Sakura同志<br>链接：<a href="https://juejin.im/post/5caf3462e51d456e7e297b9e" target="_blank" rel="noopener">https://juejin.im/post/5caf3462e51d456e7e297b9e</a><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 工作/基础建设/技巧指南 </tag>
            
            <tag> 微信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git submodule使用指南</title>
      <link href="/2019/06/25/git-submodule-usege/"/>
      <url>/2019/06/25/git-submodule-usege/</url>
      
        <content type="html"><![CDATA[<h2 id="问题场景"><a href="#问题场景" class="headerlink" title="问题场景"></a>问题场景</h2><p>相信任何开发，都会遇到一种情况。在做不同的项目，但是又都会使用到一些常用的方法/组件/代码块等等。<br>作为一个追求优雅的开发人员，肯定不能接受一段代码到处复制粘贴的操作。而且一旦这段代码日后需要更新，到处粘贴的话就需要全局搜索然后含泪修改了。<br>那么有没有一种办法，能够作为一些公共代码的“栖息地”，可以做到一处编写，到处使用呢？</p><h2 id="答案是有的。"><a href="#答案是有的。" class="headerlink" title="答案是有的。"></a><em>答案是有的。</em></h2><h2 id="寻找工具"><a href="#寻找工具" class="headerlink" title="寻找工具"></a>寻找工具</h2><p>经过在知名404网站上一番搜寻，找到了Git内置的一个功能：submodule。</p><h3 id="什么是submodule"><a href="#什么是submodule" class="headerlink" title="什么是submodule"></a>什么是submodule</h3><blockquote><p>有种情况我们经常会遇到：某个工作中的项目需要包含并使用另一个项目。 也许是第三方库，或者你独立开发的，用于多个父项目的库。 现在问题来了：你想要把它们当做两个独立的项目，同时又想在一个项目中使用另一个。</p><p>Git 通过子模块来解决这个问题。 子模块允许你将一个 Git 仓库作为另一个 Git 仓库的子目录。 它能让你将另一个仓库克隆到自己的项目中，同时还保持提交的独立。</p></blockquote><hr><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><h3 id="添加子模块"><a href="#添加子模块" class="headerlink" title="添加子模块"></a>添加子模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 直接clone，会在当前目录生成一个someSubmodule目录存放仓库内容</span><br><span class="line">git submodule add https://github.com/chaconinc/someSubmodule</span><br><span class="line"></span><br><span class="line"># 指定文件目录</span><br><span class="line">git submodule add https://github.com/chaconinc/someSubmodule  src/submodulePath</span><br></pre></td></tr></table></figure><p>新增成功之后，运行<code>git status</code>会在父仓库发现增加了2个变化</p><ol><li>new file:   .gitmodules</li><li>new file:   someSubmodule（实际上并不是一个file）</li></ol><p>展开说说：</p><ol><li><p>什么是.submodules<br>.submodules是记录当前项目的子模块配置的文件，里面保存了项目 URL 与已经拉取的本地目录之间的映射。</p></li><li><p>子模块目录<br>在新增完子模块之后，执行<code>git status</code>之后，会看到类似下面的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git diff --cached someSubmodule</span><br><span class="line">diff --git a/someSubmodule b/someSubmodule</span><br><span class="line"># 重点是下面这行的 160000</span><br><span class="line">new file mode 160000</span><br><span class="line">index 0000000..c3f01dc</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/DbConnector</span><br><span class="line">@@ -0,0 +1 @@</span><br><span class="line">+Subproject commit c3f01dc8862123d317dd46284b05b6892c7b29bc</span><br></pre></td></tr></table></figure></li></ol><p>虽然someSubmodule是父仓库里面的一个目录，但是Git并不会列出里面所有的变化，而是会当做一个特殊的提交。<br>PS：160000模式。 这是 Git 中的一种特殊模式，它本质上意味着你是将一次提交记作一项目录记录的，而非将它记录成一个子目录或者一个文件。</p><h3 id="clone已经包含子模块的项目"><a href="#clone已经包含子模块的项目" class="headerlink" title="clone已经包含子模块的项目"></a>clone已经包含子模块的项目</h3><p>正常clone包含子模块的函数之后，由于.submodule文件的存在someSubmodule已经自动生成。但是里面是空的。还需要执行2个命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 用来初始化本地配置文件</span><br><span class="line">git submodule init</span><br><span class="line"># 从该项目中抓取所有数据并检出父项目中列出的合适的提交(指定的提交)。</span><br><span class="line">git submodule update</span><br><span class="line">------------------更好的方式---------------------</span><br><span class="line"># clone 父仓库的时候加上 --recursive，会自动初始化并更新仓库中的每一个子模块</span><br><span class="line">git clone --recursive https://github.com/chaconinc/MainProject</span><br></pre></td></tr></table></figure><h3 id="git-submodule-工作流"><a href="#git-submodule-工作流" class="headerlink" title="git submodule 工作流"></a>git submodule 工作流</h3><p>当一个项目里面包含子模块的时候，不仅仅需要对父仓库进行版本管理，子模块目录下也是存在版本的。那在不同的父仓库下面如何进行子模块的版本管理也成为新的问题。</p><p>最简单的办法，就是主项目只专注使用子模块的master分支上的版本，而不使用子模块内部的任何分支版本。</p><p>操作如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd submodulePath</span><br><span class="line">git fetch</span><br><span class="line">git merge origin/master</span><br></pre></td></tr></table></figure><p>此时在主项目就能看到submodule目录已经更新了。<br>当然这也操作有点不方便，下面是更简便的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Git 将会进入子模块然后抓取并更新，默认更新master分支</span><br><span class="line">git submodule update --remote</span><br></pre></td></tr></table></figure><p>如果需要更新其他分支的话，需要另外配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 将git submodule update --remote 的分支设置为stable分支</span><br><span class="line">git config -f .gitmodules submodule.DbConnector.branch stable</span><br></pre></td></tr></table></figure><hr><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>我个人认为，子模块在使用的过程才是最值得注意的地方，所以也没有跟上面的内容一起作为“增删改查”系列写下去。<br>“改” 我认为是最重要的一环。其中又可以分为：</p><ol><li>对本地的子模块进行修改</li><li>更新他人修改的子模块内容</li></ol><h3 id="对本地的子模块进行修改"><a href="#对本地的子模块进行修改" class="headerlink" title="对本地的子模块进行修改"></a>对本地的子模块进行修改</h3><p>上面提到更新子模块的操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule update --remote</span><br></pre></td></tr></table></figure><p>但是此时的子模块是出于一个特殊的状态，虽然上游的变化被更新到了本地，但是本地子模块会处于一个<em>游离的HEAD</em>状态。</p><p>在HEAD状态下，如果将本地修改的内容进行commit，是不会“附着”到任何分支上的。<em>游离的内容，会在切换分支之后消失。</em></p><p><em>那怎么操作才是正确的呢？</em></p><ol><li><p>先进入子模块，然后检出一个分支。</p></li><li><p>再执行commit等本地操作</p></li><li><p>执行<code>git submodule update —remote —merge</code>，将上游的变化合并到本地的这个分支上。如果你忘记—rebase或—merge，Git 会将子模块更新为服务器上的状态。并且会将项目重置为一个游离的 HEAD 状态。要弥补这个错误的话，重新执行1和3就可以了。</p></li><li><p>如果本地的文件跟上游文件出现冲突，则按照普通解决办法解决了再提交就好了。</p></li><li><p>发布改动（推送）：在父仓库执行<code>git push</code>时添加<code>--recure-submodule</code> 参数，此参数表示递归子模块，可以设置为2个值“check”和“on-demand”。check会使没推送子模块的父仓库本身推送失败。而on-demand会尝试自动推送子模块后再推送父仓库，如果子模块由于其他原因失败，那么父仓库也会推送失败。</p></li></ol><h3 id="合并子模块的改动"><a href="#合并子模块的改动" class="headerlink" title="合并子模块的改动"></a>合并子模块的改动</h3><p>根据Gitbook的描述，这是当同一分支在本地和上游出现了不同分叉，需要进行合并的时候，并且二者不是祖先和后代的关系（或者说不是一条分子上的提交）。</p><p>操作方法如下：</p><ol><li>对上游的提交，进行检出分支</li><li>将1检出的分支，合并到本地</li><li>解决冲突</li><li>回到主项目</li><li>检查子模块的记录</li><li>解决子模块冲突</li><li>提交主仓库合并</li></ol><h3 id="一些我个人的理解"><a href="#一些我个人的理解" class="headerlink" title="一些我个人的理解"></a>一些我个人的理解</h3><p>子模块的使用上面说得可能还是有点比较绕，我个人认为比较合适我们团队的子模块工作流应该比较简单。</p><ol><li>主项目需要在自模块上开发新功能时，需要在主项目内的子模块开新分支，然后进行开发</li><li>子模块的代码需要独立提交，形成commit信息记录在主仓库</li><li>由于主项目最终也是需要进行打包的，所以子模块的版本只要是基于master，就认为是可信的</li><li>最后主项目的整个版本经过验证需要上线后，则将子模块的分支合并到子模块的master分支上，那么下一个进行子模块开发的人，就会包含到最新的代码</li></ol><p>参考文档：</p><ol><li><a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97" target="_blank" rel="noopener">Git - 子模块</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 工作/基础建设/技巧指南 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/06/24/hello-world/"/>
      <url>/2019/06/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
